Part 1
Please see Exercise1_part1.py

========================================================================================================================

Part 2
Please write the order of calls to climb with the corresponding args, after climb(8) is invoked.


The following is a list of all calls to climb(n) in order of execution:
climb(8)
climb(7)
climb(6)
climb(5)
climb(4)
climb(3)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(1)
climb(0)
climb(-1)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(3)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(1)
climb(0)
climb(-1)
climb(4)
climb(3)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(1)
climb(0)
climb(-1)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(5)
climb(4)
climb(3)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(1)
climb(0)
climb(-1)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(3)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(1)
climb(0)
climb(-1)
climb(6)
climb(5)
climb(4)
climb(3)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(1)
climb(0)
climb(-1)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(3)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(1)
climb(0)
climb(-1)
climb(4)
climb(3)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)
climb(1)
climb(0)
climb(-1)
climb(2)
climb(1)
climb(0)
climb(-1)
climb(0)

========================================================================================================================

Part 3:
When reviewing the order of calls in Part 2, can you point out the inefficiency?

As hinted in the exercise, climb(n) is indeed deterministic.
so after each time climb(1) is called there is a call to climb(0).
and after each call to climb(2), the following calls take place in the same order:
climb(1)
climb(0)
climb(-1)
climb(0)

And so on.

An efficient approach would be to store each call's result in a hash structure (dictionary) and access it upon future
calls in order to cut down redundant calculations.
See Exercise1_part1_enhanced.py for implementation.
